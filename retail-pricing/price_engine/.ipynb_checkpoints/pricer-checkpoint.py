def increasePriceByPercentageOnClass(basedf, percentage, classParam):
    """This function increases the price by a certain percentage on the specified class.
    
    Parameters
    ----------
    basedf : pandas dataframe
        Initial price list
    percentage : float
        Percentage that will be used to multiply the price
    classParam : string
        Class on which to increase the price
        
    Returns
    -------
    pandas dataframe
        A new price list with increased prices on the class specified
    """
    res = basedf.copy()
    res.loc[(res['Class'] == classParam), 'SellingPrice'] = res['SellingPrice'] * (1+percentage/100)
    return res[["ProductId","SellingPrice"]]


def optimizePriceIndex(basedf):
    """This pricing function has been made very simple as the main purpose is to serve the use case example.
    In real life this would typically be replaced by a more flexible price optimization engine with several parameters, such as that of ActiveViam.
    
    Parameters
    ----------
    basedf : pandas dataframe
        Initial price list
        
    Returns
    -------
    pandas dataframe
        A new price list with an optimized price such that Driver and Independent products are more competitive while compensating the loss of margin this would have generated by increasing the price of Complementary products.
    """
    res = basedf.copy()
    res.loc[(res['Class'] == 'Complementary'), 'SellingPrice'] = res['SellingPrice'] * 1.125
    res.loc[(res['Class'] == 'Driver'), 'SellingPrice'] = res['SellingPrice'] * 0.96
    res.loc[(res['Class'] == 'Independent'), 'SellingPrice'] = res['SellingPrice'] * 0.98
    return res[["ProductId","SellingPrice"]]