def increase_price_by_percentage_on_class(
    initial_price_list, percentage: float, class_param: str
):
    """
    This function increases the price by a certain percentage on the specified class.
    
    Args:
        initial_price_list (pandas dataframe): The initial SellingPrice list
        percentage (float): Percentage that will be used to multiply the price
        class_param (str): Class of products on which to increase the price
        
    Returns:
        pandas dataframe: A new SellingPrice list with increased prices on the class specified
    """
    new_price_list = initial_price_list.copy()
    new_price_list.loc[
        (new_price_list["Class"] == class_param), "SellingPrice"
    ] = new_price_list["SellingPrice"] * (1 + percentage / 100)
    return new_price_list[["ProductId", "SellingPrice"]]


def optimize_price_index(initial_price_list):
    """
    This pricing function has been made very simple as the main purpose is to serve the use case example.
    In real life this would typically be replaced by a more flexible price optimization engine with several parameters,
    such as that of ActiveViam.
    
    Args:
        initial_price_list (pandas dataframe): The initial SellingPrice list
        
    Returns:
        pandas dataframe: A new SellingPrice list with an optimized price such that Driver and Independent products are more competitive while compensating the loss of margin this would have generated by increasing the price of Complementary products.
    """
    new_price_list = initial_price_list.copy()
    new_price_list.loc[(new_price_list["Class"] == "Complementary"), "SellingPrice"] = (
        new_price_list["SellingPrice"] * 1.125
    )
    new_price_list.loc[(new_price_list["Class"] == "Driver"), "SellingPrice"] = (
        new_price_list["SellingPrice"] * 0.96
    )
    new_price_list.loc[(new_price_list["Class"] == "Independent"), "SellingPrice"] = (
        new_price_list["SellingPrice"] * 0.98
    )
    return new_price_list[["ProductId", "SellingPrice"]]
